#!/usr/bin/env python3

import argparse
import sys

from pre_process import pre_process
from emulator import Emulator
from frontend import Lexer, Parser, TokenKind

class RegMachineMain:
    args: argparse.Namespace

    def __init__(self, args: argparse.Namespace):
        self.args = args

    def parse(self):
        """Parse the input file."""
        if self.args.input_file is None:
            f = sys.stdin
        else:
            f = open(self.args.input_file, mode='r')

        x,f,alias_macro_map = pre_process(f)

        print(alias_macro_map)

        lexer = Lexer(f)
        parser = Parser(lexer)
        self.program = parser.parse_input()

    def emulate(self):
        e = Emulator(*self.program)
        e.run(trace=self.args.trace)

    def lexerdebug(self):
        """Parse the input file."""
        if self.args.input_file is None:
            f = sys.stdin
        else:
            f = open(self.args.input_file, mode='r')
        lexer = Lexer(f)
        token = lexer.consume()
        while token.kind != TokenKind.EOF:
            print(token)
            token = lexer.consume()
        print(token)

arg_parser = argparse.ArgumentParser(
    description='1')
arg_parser.add_argument("input_file", type=str, nargs="?", help="Path to input file")
arg_parser.add_argument("-t", "--trace", action='store_true')
# arg_parser.add_argument("-m", "--macro", nargs='+', default=[], help="macros")

def __main__(args: argparse.Namespace):
    regm_main = RegMachineMain(args)
    regm_main.parse()
    regm_main.emulate()
    # regm_main.lexerdebug()

    if args.trace:
        pass


if __name__ == "__main__":
    args = arg_parser.parse_args()
    __main__(args)
