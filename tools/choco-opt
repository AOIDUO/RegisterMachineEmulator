#!/usr/bin/env python3

import argparse
import os
import sys
from io import StringIO

from xdsl.parser import Parser
from xdsl.printer import Printer
from xdsl.ir import MLContext
from xdsl.dialects.builtin import Builtin, ModuleOp

from choco.lexer import Lexer as ChocoLexer
from choco.parser import Parser as ChocoParser
from choco.dialects.choco_ast import ChocoAST
from choco.dialects.choco_ast import Program as ChocoASTProgram

from typing import Callable, List


class ChocoOptMain:
    ctx: MLContext
    args: argparse.Namespace
    pipeline: List[Callable[[ModuleOp], None]]

    def __init__(self, args: argparse.Namespace):
        self.ctx = MLContext()
        self.args = args
        self.register_all_dialects()

    def register_all_dialects(self):
        """Register all dialects that can be used."""
        builtin = Builtin(self.ctx)
        choco_ast = ChocoAST(self.ctx)

    def parse_frontend(self) -> ModuleOp:
        """Parse the input file."""
        if self.args.input_file is None:
            f = sys.stdin
            file_extension = '.xdsl'
        else:
            f = open(self.args.input_file, mode='r')
            _, file_extension = os.path.splitext(self.args.input_file)

        if file_extension == '.regm':
            lexer = ChocoLexer(f)
            parser = ChocoParser(lexer)
            program = parser.parse_input()
            return program

        raise Exception(f"Unrecognized file extension '{file_extension}'")

    def output_resulting_program(self, prog: ModuleOp) -> str:
        """Get the resulting program."""
        output = StringIO()
        if self.args.target == 'xdsl':
            printer = Printer(stream=output)
            printer.print_op(prog)
            return output.getvalue()
        raise Exception(f"Unknown target {self.args.target}")

    def print_to_output_stream(self, contents: str):
        """Print the contents in the expected stream."""
        if self.args.output_file is None:
            print(contents)
        else:
            output_stream = open(self.args.output_file, 'w')
            output_stream.write(contents)


arg_parser = argparse.ArgumentParser(
    description='xDSL modular optimizer driver')
arg_parser.add_argument("input_file",
                        type=str,
                        nargs="?",
                        help="Path to input file")

arg_parser.add_argument("-f",
                        "--frontend",
                        choices=["native"],
                        default='native')

arg_parser.add_argument("-o",
                        "--output-file",
                        type=str,
                        required=False,
                        help="path to output file")

arg_parser.add_argument("-t",
                        "--target",
                        type=str,
                        choices=["xdsl"],
                        default="xdsl")


def __main__(args: argparse.Namespace):
    choco_main = ChocoOptMain(args)
    module = choco_main.parse_frontend()
    contents = choco_main.output_resulting_program(module)
    choco_main.print_to_output_stream(contents)


if __name__ == "__main__":
    args = arg_parser.parse_args()
    __main__(args)
